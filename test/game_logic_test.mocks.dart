// Mocks generated by Mockito 5.4.0 from annotations
// in my_2048/test/game_logic_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:my_2048/src/game_board.dart' as _i3;
import 'package:my_2048/src/game_settings.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [GameSettings].
///
/// See the documentation for Mockito's code generation for more information.
class MockGameSettings extends _i1.Mock implements _i2.GameSettings {
  @override
  Map<String, int> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, int>{},
        returnValueForMissingStub: <String, int>{},
      ) as Map<String, int>);
  @override
  void setTopValue(int? value) => super.noSuchMethod(
        Invocation.method(
          #setTopValue,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setCurrentScore(int? value) => super.noSuchMethod(
        Invocation.method(
          #setCurrentScore,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setTopScore(int? value) => super.noSuchMethod(
        Invocation.method(
          #setTopScore,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool isCurrentScoreBiggerThanTopScore() => (super.noSuchMethod(
        Invocation.method(
          #isCurrentScoreBiggerThanTopScore,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [GameBoard].
///
/// See the documentation for Mockito's code generation for more information.
class MockGameBoard extends _i1.Mock implements _i3.GameBoard {
  @override
  List<List<_i3.Tile>> get grid => (super.noSuchMethod(
        Invocation.getter(#grid),
        returnValue: <List<_i3.Tile>>[],
        returnValueForMissingStub: <List<_i3.Tile>>[],
      ) as List<List<_i3.Tile>>);
  @override
  set grid(List<List<_i3.Tile>>? _grid) => super.noSuchMethod(
        Invocation.setter(
          #grid,
          _grid,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<List<_i3.Tile>> get gridColumns => (super.noSuchMethod(
        Invocation.getter(#gridColumns),
        returnValue: <List<_i3.Tile>>[],
        returnValueForMissingStub: <List<_i3.Tile>>[],
      ) as List<List<_i3.Tile>>);
  @override
  List<List<_i3.Tile>> get gridColumnsReversed => (super.noSuchMethod(
        Invocation.getter(#gridColumnsReversed),
        returnValue: <List<_i3.Tile>>[],
        returnValueForMissingStub: <List<_i3.Tile>>[],
      ) as List<List<_i3.Tile>>);
  @override
  List<List<_i3.Tile>> get gridReversed => (super.noSuchMethod(
        Invocation.getter(#gridReversed),
        returnValue: <List<_i3.Tile>>[],
        returnValueForMissingStub: <List<_i3.Tile>>[],
      ) as List<List<_i3.Tile>>);
  @override
  int get topValue => (super.noSuchMethod(
        Invocation.getter(#topValue),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  void show() => super.noSuchMethod(
        Invocation.method(
          #show,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  Iterable<_i3.Tile> flat_grid() => (super.noSuchMethod(
        Invocation.method(
          #flat_grid,
          [],
        ),
        returnValue: <_i3.Tile>[],
        returnValueForMissingStub: <_i3.Tile>[],
      ) as Iterable<_i3.Tile>);
  @override
  void addNewNumber(int? numbersToAdd) => super.noSuchMethod(
        Invocation.method(
          #addNewNumber,
          [numbersToAdd],
        ),
        returnValueForMissingStub: null,
      );
}
